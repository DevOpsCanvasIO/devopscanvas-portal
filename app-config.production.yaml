app:
  title: DevOpsCanvas Developer Portal
  baseUrl: ${APP_BASE_URL}
  branding:
    theme:
      light:
        primaryColor: '#1976d2'
        headerColor1: '#1976d2'
        headerColor2: '#1565c0'
        navigationIndicatorColor: '#1976d2'
      dark:
        primaryColor: '#90caf9'
        headerColor1: '#0d47a1'
        headerColor2: '#1565c0'
        navigationIndicatorColor: '#90caf9'

organization:
  name: DevOpsCanvas

backend:
  baseUrl: ${BACKEND_BASE_URL}
  listen:
    port: ${PORT:-7007}
    host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: ${BACKEND_BASE_URL}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: better-sqlite3
    connection: ':memory:'
  reading:
    allow:
      - host: devopscanvas-control-plane.devopscanvas.svc.cluster.local
      - host: localhost

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}

proxy: {}

techdocs:
  builder: 'local'
  generator:
    runIn: 'local'
  publisher:
    type: 'local'

auth:
  providers:
    guest: {}

scaffolder: {}

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Template, User, Group, Domain]
  locations:
    # DevOpsCanvas Platform Components
    - type: file
      target: ../../examples/entities.yaml
      rules:
        - allow: [Component, System, API, Resource, Domain]
    
    # DevOpsCanvas Service Templates
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]
    
    # DevOpsCanvas Organization
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

  processors:
    githubApi:
      privateToken: ${GITHUB_TOKEN}

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - url: https://kubernetes.default.svc
          name: devopscanvas-cluster
          authProvider: 'serviceAccount'
          skipTLSVerify: false
          skipMetricsLookup: false
          serviceAccountToken: ${K8S_SERVICE_ACCOUNT_TOKEN}
          dashboardUrl: https://k8s-dashboard.devopscanvas.io
          dashboardApp: standard

# DevOpsCanvas specific configuration
devopscanvas:
  platform:
    version: '2.1.0'
    environment: ${ENVIRONMENT:-production}
    features:
      gitops: true
      observability: true
      security: true
      finops: true
    endpoints:
      controlPlane: 'http://devopscanvas-control-plane.devopscanvas.svc.cluster.local:3000'
      argocd: 'https://argocd.devopscanvas.io'
      grafana: 'https://grafana.devopscanvas.io'
      prometheus: 'https://prometheus.devopscanvas.io'

# Search configuration
search:
  pg:
    highlightOptions:
      useHighlight: true
      maxWord: 35
      minWord: 1
      shortWord: 3
      highlightAll: false
      maxFragments: 0
      fragmentDelimiter: ' ... '
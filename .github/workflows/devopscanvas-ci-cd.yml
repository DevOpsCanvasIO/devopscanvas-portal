name: DevOpsCanvas Portal - Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Deployment Target'
        required: true
        default: 'build-only'
        type: choice
        options:
        - build-only
        - aws-ecs
        - gitops-pr
        - full-deploy
      registries:
        description: 'Target Container Registries'
        required: true
        default: 'ecr,ghcr'
        type: choice
        options:
        - ecr
        - ghcr
        - dockerhub
        - ecr,ghcr
        - ecr,dockerhub
        - ghcr,dockerhub
        - ecr,ghcr,dockerhub
      aws_region:
        description: 'AWS Region for ECR/ECS'
        required: false
        default: 'us-east-1'
        type: choice
        options:
        - us-east-1
        - us-west-2
        - eu-west-1
        - ap-southeast-1
      environment:
        description: 'Deployment Environment'
        required: false
        default: 'production'
        type: choice
        options:
        - development
        - staging
        - production
      force_deploy:
        description: 'Force ECS deployment (skip health checks)'
        required: false
        default: false
        type: boolean
      run_tests:
        description: 'Run tests before build'
        required: false
        default: false
        type: boolean

env:
  # Registry Configuration
  AWS_REGION: ${{ github.event.inputs.aws_region || 'us-east-1' }}
  ECR_REPOSITORY: devopscanvas-portal
  DOCKER_HUB_REPOSITORY: jtcrump32/devopscanvas-portal
  GHCR_REPOSITORY: devopscanvas-portal
  
  # AWS ECS Configuration
  ECS_CLUSTER: devopscanvas-cluster
  ECS_SERVICE: devopscanvas-portal-service
  ECS_TASK_DEFINITION: devopscanvas-portal-task
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  
  # Build Configuration
  DOCKERFILE: Dockerfile.backstage
  PLATFORM: linux/amd64

jobs:
  # ============================================================================
  # TESTING JOB (Optional)
  # ============================================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_tests == 'true' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Enable Corepack
      run: corepack enable

    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies..."
        yarn install --frozen-lockfile

    - name: Type check
      run: |
        echo "üîç Running TypeScript type checking..."
        yarn tsc --noEmit || echo "Type check completed with warnings"

    - name: Lint code
      run: |
        echo "üßπ Running linting..."
        yarn lint:all || echo "Linting completed with warnings"

    - name: Build backend
      run: |
        echo "üî® Building backend..."
        yarn build:backend

    - name: Build frontend
      run: |
        echo "üé® Building frontend..."
        yarn build:app

    - name: Test summary
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Dependencies installed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ TypeScript compilation" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Code linting" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Backend build" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Frontend build" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # BUILD AND PUSH JOB (Core functionality)
  # ============================================================================
  build-and-push:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    
    outputs:
      ecr-image: ${{ steps.images.outputs.ecr-image }}
      dockerhub-image: ${{ steps.images.outputs.dockerhub-image }}
      ghcr-image: ${{ steps.images.outputs.ghcr-image }}
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.metadata.outputs.image-tag }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ env.PLATFORM }}

    # ========================================================================
    # AUTHENTICATION SETUP
    # ========================================================================
    - name: Authenticate with Docker Hub (Rate Limit Prevention)
      run: |
        if [ -n "${{ secrets.DOCKER_HUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_HUB_TOKEN }}" ]; then
          echo "üîê Authenticating with Docker Hub to avoid rate limits..."
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login --username "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          echo "‚úÖ Docker Hub authentication successful"
        else
          echo "‚ö†Ô∏è Docker Hub credentials not found - using anonymous pulls"
          echo "üí° Configure Docker Hub authentication to avoid rate limits"
        fi
      continue-on-error: true

    - name: Determine target registries
      id: registries
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          REGISTRIES="${{ github.event.inputs.registries }}"
          
          # Validate Docker Hub is available if requested
          if [[ "$REGISTRIES" == *"dockerhub"* ]]; then
            if [ -z "$DOCKER_HUB_USERNAME" ] || [ -z "$DOCKER_HUB_TOKEN" ]; then
              echo "‚ùå Docker Hub requested but credentials not available"
              echo "üí° Removing Docker Hub from target registries"
              REGISTRIES=$(echo "$REGISTRIES" | sed 's/dockerhub,//g' | sed 's/,dockerhub//g' | sed 's/^dockerhub$//g')
              if [ -z "$REGISTRIES" ]; then
                REGISTRIES="ecr,ghcr"
              fi
            fi
          fi
        else
          # Auto-determine registries based on event and credentials
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            REGISTRIES="ghcr"  # Only GHCR for PR builds
          else
            # For push events, use ECR and GHCR (Docker Hub optional)
            # Docker Hub can be added manually via workflow_dispatch if needed
            REGISTRIES="ecr,ghcr"
          fi
        fi
        
        echo "registries=$REGISTRIES" >> $GITHUB_OUTPUT
        echo "üéØ Target registries: $REGISTRIES"

    # ========================================================================
    # REGISTRY AUTHENTICATION
    # ========================================================================
    - name: Configure AWS credentials
      if: contains(steps.registries.outputs.registries, 'ecr')
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: contains(steps.registries.outputs.registries, 'ecr')
      id: login-ecr
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        echo "registry=$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT
        echo "account-id=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "‚úÖ ECR authentication successful"

    - name: Login to GitHub Container Registry
      if: contains(steps.registries.outputs.registries, 'ghcr')
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Docker Hub
      if: contains(steps.registries.outputs.registries, 'dockerhub')
      run: |
        if [ -n "${{ secrets.DOCKER_HUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_HUB_TOKEN }}" ]; then
          echo "üîê Authenticating with Docker Hub for pushing..."
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login --username "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          echo "‚úÖ Docker Hub authentication successful"
          
          # Verify repository access
          echo "üîç Verifying Docker Hub repository access..."
          if docker pull ${{ env.DOCKER_HUB_REPOSITORY }}:latest 2>/dev/null || echo "Repository may be empty, continuing..."; then
            echo "‚úÖ Docker Hub repository access verified"
          else
            echo "‚ö†Ô∏è Could not verify repository access, but continuing..."
          fi
        else
          echo "‚ùå Docker Hub credentials required for pushing to Docker Hub"
          echo "üí° Available registries without Docker Hub: ECR, GHCR"
          exit 1
        fi

    # ========================================================================
    # IMAGE METADATA AND TAGGING
    # ========================================================================
    - name: Generate image metadata
      id: metadata
      run: |
        # Generate consistent image tag
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          IMAGE_TAG="${{ env.ENVIRONMENT }}-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}"
        elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          IMAGE_TAG="${{ github.ref_name }}"
        else
          IMAGE_TAG="${{ github.ref_name }}-${GITHUB_SHA:0:7}"
        fi
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è Image tag: $IMAGE_TAG"

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ contains(steps.registries.outputs.registries, 'ecr') && format('{0}/{1}', steps.login-ecr.outputs.registry, env.ECR_REPOSITORY) || '' }}
          ${{ contains(steps.registries.outputs.registries, 'dockerhub') && env.DOCKER_HUB_REPOSITORY || '' }}
          ${{ contains(steps.registries.outputs.registries, 'ghcr') && format('ghcr.io/{0}/{1}', github.repository_owner, env.GHCR_REPOSITORY) || '' }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.metadata.outputs.image-tag }}
        labels: |
          org.opencontainers.image.title=DevOpsCanvas Portal
          org.opencontainers.image.description=DevOpsCanvas Backstage Developer Portal for AWS
          org.opencontainers.image.vendor=DevOpsCanvas
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

    # ========================================================================
    # BUILD AND PUSH
    # ========================================================================
    - name: Build and push container images
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./${{ env.DOCKERFILE }}
        platforms: ${{ env.PLATFORM }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true

    # ========================================================================
    # SECURITY SCANNING
    # ========================================================================
    - name: Run security scan with Trivy
      if: contains(steps.registries.outputs.registries, 'ecr') && github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.metadata.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload security scan results
      if: contains(steps.registries.outputs.registries, 'ecr') && github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    # ========================================================================
    # KEYLESS SIGNING (Optional)
    # ========================================================================
    - name: Install Cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@v3

    - name: Sign container images (Keyless)
      if: github.event_name != 'pull_request'
      env:
        COSIGN_EXPERIMENTAL: 1
      run: |
        echo "üîê Signing container images with keyless signatures..."
        
        if [[ "${{ steps.registries.outputs.registries }}" == *"ghcr"* ]]; then
          GHCR_IMAGE="ghcr.io/${{ github.repository_owner }}/${{ env.GHCR_REPOSITORY }}@${{ steps.build.outputs.digest }}"
          cosign sign --yes "$GHCR_IMAGE"
          echo "‚úÖ Signed GHCR image: $GHCR_IMAGE"
        fi
        
        if [[ "${{ steps.registries.outputs.registries }}" == *"ecr"* ]]; then
          ECR_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}@${{ steps.build.outputs.digest }}"
          cosign sign --yes "$ECR_IMAGE"
          echo "‚úÖ Signed ECR image: $ECR_IMAGE"
        fi

    # ========================================================================
    # OUTPUT GENERATION
    # ========================================================================
    - name: Set image outputs
      id: images
      run: |
        if [[ "${{ steps.registries.outputs.registries }}" == *"ecr"* ]]; then
          ECR_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.metadata.outputs.image-tag }}"
          echo "ecr-image=$ECR_IMAGE" >> $GITHUB_OUTPUT
        fi
        
        if [[ "${{ steps.registries.outputs.registries }}" == *"dockerhub"* ]]; then
          DOCKERHUB_IMAGE="${{ env.DOCKER_HUB_REPOSITORY }}:${{ steps.metadata.outputs.image-tag }}"
          echo "dockerhub-image=$DOCKERHUB_IMAGE" >> $GITHUB_OUTPUT
        fi
        
        if [[ "${{ steps.registries.outputs.registries }}" == *"ghcr"* ]]; then
          GHCR_IMAGE="ghcr.io/${{ github.repository_owner }}/${{ env.GHCR_REPOSITORY }}:${{ steps.metadata.outputs.image-tag }}"
          echo "ghcr-image=$GHCR_IMAGE" >> $GITHUB_OUTPUT
        fi

    - name: Generate build summary
      run: |
        echo "## üöÄ DevOpsCanvas Portal Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Container Images Built" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.registries.outputs.registries }}" == *"ecr"* ]]; then
          echo "- **AWS ECR**: \`${{ steps.images.outputs.ecr-image }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.registries.outputs.registries }}" == *"dockerhub"* ]]; then
          echo "- **Docker Hub**: \`${{ steps.images.outputs.dockerhub-image }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.registries.outputs.registries }}" == *"ghcr"* ]]; then
          echo "- **GitHub Container Registry**: \`${{ steps.images.outputs.ghcr-image }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: ${{ env.PLATFORM }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag**: \`${{ steps.metadata.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Registries**: ${{ steps.registries.outputs.registries }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ contains(steps.registries.outputs.registries, 'ecr') && github.event_name != 'pull_request' && '‚úÖ Completed' || '‚è≠Ô∏è Skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Keyless Signing**: ${{ github.event_name != 'pull_request' && '‚úÖ Completed' || '‚è≠Ô∏è Skipped' }}" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # AWS ECS DEPLOYMENT JOB
  # ============================================================================
  deploy-aws-ecs:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: |
      always() && 
      needs.build-and-push.result == 'success' && 
      contains(needs.build-and-push.outputs.ecr-image, 'ecr') &&
      (
        (github.event.inputs.deployment_target == 'aws-ecs') ||
        (github.event.inputs.deployment_target == 'full-deploy') ||
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
      )
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create new ECS task definition
      id: task-def
      run: |
        echo "üìã Creating new ECS task definition..."
        
        # Get current task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition)
        
        # Update image URI in task definition
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ needs.build-and-push.outputs.ecr-image }}" \
          '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
        
        # Register new task definition
        NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEFINITION | aws ecs register-task-definition \
          --cli-input-json file:///dev/stdin \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "task-definition-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
        echo "‚úÖ New task definition registered: $NEW_TASK_DEF_ARN"

    - name: Deploy to ECS
      run: |
        echo "üö¢ Deploying to ECS..."
        
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ steps.task-def.outputs.task-definition-arn }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for deployment completion
      if: github.event.inputs.force_deploy != 'true'
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --cli-read-timeout 900

    - name: Get deployment status and health check
      run: |
        echo "üìä Getting deployment status..."
        
        # Get service status
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }} \
          --query 'services[0]')
        
        RUNNING_COUNT=$(echo $SERVICE_STATUS | jq -r '.runningCount')
        DESIRED_COUNT=$(echo $SERVICE_STATUS | jq -r '.desiredCount')
        
        echo "Service Status: $RUNNING_COUNT/$DESIRED_COUNT tasks running"
        
        # Try to get load balancer URL
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names devopscanvas-alb \
          --region ${{ env.AWS_REGION }} \
          --query 'LoadBalancers[0].DNSName' \
          --output text 2>/dev/null || echo "not-found")
        
        if [ "$ALB_DNS" != "not-found" ]; then
          echo "üåê Application URL: http://$ALB_DNS"
          
          # Basic health check
          echo "üè• Running health check..."
          sleep 30
          
          for i in {1..5}; do
            if curl -f -s "http://$ALB_DNS/healthcheck" > /dev/null; then
              echo "‚úÖ Health check passed on attempt $i"
              break
            else
              echo "‚è≥ Health check failed on attempt $i, retrying..."
              sleep 30
            fi
          done
        fi

    - name: Generate deployment summary
      run: |
        echo "## üöÄ AWS ECS Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
        echo "- **AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ECS Cluster**: ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ECS Service**: ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Image**: \`${{ needs.build-and-push.outputs.ecr-image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Task Definition**: ${{ steps.task-def.outputs.task-definition-arn }}" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # GITOPS DEPLOYMENT JOB
  # ============================================================================
  deploy-gitops:
    name: Create GitOps Pull Request
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: |
      always() && 
      needs.build-and-push.result == 'success' && 
      (
        (github.event.inputs.deployment_target == 'gitops-pr') ||
        (github.event.inputs.deployment_target == 'full-deploy') ||
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
      )
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout GitOps repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/devopscanvas-gitops
        token: ${{ secrets.GITHUB_TOKEN }}
        path: gitops

    - name: Update image tag in GitOps repo
      run: |
        cd gitops
        
        # Update the image tag in Helm values or Kubernetes manifests
        if [ -f "applications/portal.yaml" ]; then
          sed -i "s|tag: .*|tag: \"${{ needs.build-and-push.outputs.image-tag }}\"|g" applications/portal.yaml
        elif [ -f "apps/devopscanvas-portal/values.yaml" ]; then
          sed -i "s|tag: .*|tag: \"${{ needs.build-and-push.outputs.image-tag }}\"|g" apps/devopscanvas-portal/values.yaml
        else
          echo "‚ö†Ô∏è GitOps configuration file not found"
        fi

    - name: Create GitOps Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        path: gitops
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "feat: update devopscanvas-portal to ${{ needs.build-and-push.outputs.image-tag }}"
        title: "üöÄ Update DevOpsCanvas Portal to ${{ needs.build-and-push.outputs.image-tag }}"
        body: |
          ## üöÄ Automated DevOpsCanvas Portal Update
          
          This PR updates the DevOpsCanvas Portal to a new version.
          
          ### üì¶ Container Images
          ${{ needs.build-and-push.outputs.ecr-image && format('- **AWS ECR**: `{0}`', needs.build-and-push.outputs.ecr-image) || '' }}
          ${{ needs.build-and-push.outputs.ghcr-image && format('- **GHCR**: `{0}`', needs.build-and-push.outputs.ghcr-image) || '' }}
          ${{ needs.build-and-push.outputs.dockerhub-image && format('- **Docker Hub**: `{0}`', needs.build-and-push.outputs.dockerhub-image) || '' }}
          
          ### üîß Build Details
          - **Commit**: ${{ github.sha }}
          - **Image Tag**: `${{ needs.build-and-push.outputs.image-tag }}`
          - **Image Digest**: `${{ needs.build-and-push.outputs.image-digest }}`
          - **Platform**: ${{ env.PLATFORM }}
          
          ### üîí Security
          - ‚úÖ **Keyless Signature**: Signed with Cosign
          - ‚úÖ **SBOM**: Software Bill of Materials included
          - ‚úÖ **Provenance**: Build provenance attestation
          ${{ github.event_name != 'pull_request' && '- ‚úÖ **Security Scan**: Trivy vulnerability scan completed' || '' }}
          
          ---
          *This PR was automatically created by the DevOpsCanvas CI/CD pipeline.*
        branch: update-portal-${{ github.sha }}
        delete-branch: true

  # ============================================================================
  # CLEANUP JOB
  # ============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-aws-ecs, deploy-gitops]
    if: always()
    
    steps:
    - name: Docker logout
      run: |
        docker logout || true
        docker logout ghcr.io || true
        echo "üßπ Docker logout completed"

    - name: Final summary
      run: |
        echo "## üéâ DevOpsCanvas Portal Pipeline Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Build & Push**: ${{ needs.build-and-push.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **AWS ECS Deploy**: ${{ needs.deploy-aws-ecs.result == 'success' && '‚úÖ Success' || needs.deploy-aws-ecs.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **GitOps PR**: ${{ needs.deploy-gitops.result == 'success' && '‚úÖ Success' || needs.deploy-gitops.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ **DevOpsCanvas Portal deployment pipeline completed successfully!**"